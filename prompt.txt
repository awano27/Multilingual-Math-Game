あなたはソースコード生成に特化したエージェントです。リポジトリのルートにある "さんすうダンジョン"（Multilingual-Math-Game）に対して、以下を実装して下さい。出力はパッチ（ファイルの追加・変更）と単体テスト、README の変更差分で示してください。コミットメッセージをつけ、PR 用の簡易説明（200〜400字）を生成してください。

-------------------------
要件（優先度順）
-------------------------
1) 国語モジュール追加（subject: "kokugo"）
   - 問題タイプ:
     a. 読み（よみ）：漢字 → ひらがな入力（検証は正規化して行う）。
     b. 書き取り：ひらがな/語を漢字に変換する選択肢 or 入力（自動採点は候補一致）。
     c. 語彙：同義語/反義語の選択問題。
     d. 短文読解：短い文章（40〜120字）に対する選択式設問（主旨・推測・語句の意味）。
     e. 文法：単語並び替え（正しい文を作る）/品詞ラベリング（名詞/動詞/形容詞）。
   - 各問題は "difficulty"（easy/normal/hard）を持ち、2年/3年で出題範囲が異なる。

2) 多言語サポート（ja/en/fr/zh）
   - UI の切り替え: ページ全体を即時切替（i18n JSON）。
   - 各問題データは言語ごとに翻訳済みファイルを持つ（`data/questions/{grade}/{subject}/{lang}.json`）。
   - 出題は表示言語に合わせる。問題は「言語学習モード」では母語と学習言語を切替できる（例：母語: ja, 学習: en → 英語語彙クイズで英語を出題し日本語のヒントを出す）。

3) UI 要素
   - 言語切替ボタン（ヘッダ、4言語）。
   - TTS ボタン（各設問に発音を再生する hook を作る。最小実装はブラウザの SpeechSynthesis）。
   - ヒントボタン：1回押すとヒントを消費（制限あり）。間違えるたびに復習リストへ追加。

4) データスキーマ（JSON） — 必須
   - 各問題 JSON は下記キーを持つ:
     {
       "id": "kokugo-ja-2-0001",
       "grade": 2,
       "subject": "kokugo",
       "lang": "ja",
       "type": "reading" | "kanji" | "vocab" | "comprehension" | "grammar",
       "difficulty": "easy" | "normal" | "hard",
       "prompt": "…",           // 説問テキスト（表示言語）
       "choices": ["…"],        // 選択肢（存在する場合）
       "answer": "…",           // 正解（文字列 or index）
       "explanation": "…",      // 解説（表示言語）
       "hints": ["…"],          // ヒント配列
       "tts": { "text": "…", "lang": "ja-JP" } // 任意
     }

5) 統計と実績
   - 問題ごと・言語ごとの正答率を記録（localStorageで可）。バッジ判定ルールを 3 種類追加:
     - "Lang Novice"（言語で50%以上 × 10 問正解）
     - "Reading Champ"（読解問題で90%連続5回）
     - "Bug Catcher"（虫図鑑コンプリートに関連する言語クイズ達成）
   - 成果画面（既存の統計画面に言語タブを追加）

6) テスト要件
   - question_manager のロジックに対するユニットテストを追加（最低カバレッジ 80%）。
   - フロント：言語切替時に表示が切り替わる簡易テスト（Jest + React Testing Library で可）。

-------------------------
実装命令（行動指示）
-------------------------
1. 新規ファイルを追加:
   - `src/modules/question_manager.ts`（問題ロード、正誤判定、難易度フィルタ）
   - `src/modules/i18n.ts`（i18n ローダ）
   - `src/components/LanguageSwitcher.tsx`
   - `src/components/TTSButton.tsx`
   - `data/questions/2/kokugo/ja.json`（10問サンプル）
   - `data/questions/3/kokugo/ja.json`（10問サンプル）
   - 同様に en/fr/zh のサンプル翻訳ファイル（各2問ずつ最低）
2. 既存の問題フロー（算数）に hook を差し込み:
   - `src/pages/game/*` にて、新しい subject 値（kokugo）を扱えるように変更。
3. 単体テスト:
   - `tests/question_manager.test.ts`（ロジック検証）
   - `tests/i18n.test.ts`（切替テスト）
4. README 更新: 追加された機能、データ編集方法、i18n 追加手順を記述。
5. PR 用説明文を生成。
6. 生成コードは TypeScript を優先（リポジトリが JS の場合は JS へ変換して出力）。

-------------------------
Acceptance Criteria（厳密）
-------------------------
- 新規 question_manager は指定フォルダから grade/subject/lang で問題をロードできること（ユニットテストで検証）。
- UI の言語切替を行うと、question.prompt / choices / explanation / tts が切り替わること（テストで確認）。
- 5問中4問正解で言語バッジが付与される挙動をシミュレーションテストで確認可能であること。
- 生成された sample JSON を用いてローカルで `npm run dev`（または同等） でページが壊れず表示されること。
- 変更は自動で `git` に commit され、PR 説明が添付されること。

-------------------------
出力形式
-------------------------
- 変更された / 追加されたファイル一覧（diff 形式が望ましい）
- 追加した単体テストと実行結果サンプル（テストは自動で実行して結果を貼る）
- README の更新差分
- PR 説明（200〜400字）
- コマンド例: テスト実行 `npm test` / `yarn test`、開発起動 `npm run dev`

-------------------------
注意点
-------------------------
- 生成コードは安全第一（外部APIキーやシークレットを含めない）。
- TTS はブラウザの Web Speech API を利用する簡易実装でよい（将来的にクラウドTTSへ切替しやすくする）。
- 翻訳テキストは教育的正確性を意識する（簡潔で子ども向けの言葉遣い）。
